// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
// swift-module-flags: -target x86_64-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ChabokKit
import CommonCrypto
import CoreTelephony
import Foundation
import Network
import SQLite3
import Security
import Swift
import SystemConfiguration
import UIKit
import zlib
public protocol FrameCollectorDelegate : AnyObject {
  func didForm(event: ChabokKit.FrameCollector.Event)
  func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
}
@_hasMissingDesignatedInitializers public class FrameCollector {
  public enum Event {
    case text(Swift.String)
    case binary(Foundation.Data)
    case pong(Foundation.Data?)
    case ping(Foundation.Data?)
    case error(Swift.Error)
    case closed(Swift.String, Swift.UInt16)
  }
  public func add(frame: ChabokKit.Frame)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class UserAction : ObjectiveC.NSObject {
  @objc final public func isLoggedIn() -> Swift.Bool
  @objc final public func getUserId() -> Swift.String
  @objc final public func login(userId: Swift.String)
  @objc final public func login(userId: Swift.String, callback: @escaping ChabokKit.Callback)
  @objc final public func logout()
  @objc final public func logout(callback: @escaping ChabokKit.Callback)
  @objc final public func setProfile(profile: ChabokKit.Profile)
  @objc final public func setProfile(profile: ChabokKit.Profile, callback: @escaping ChabokKit.Callback)
  @objc final public func setAttribute(key: Swift.String, value: Any)
  @objc final public func setAttribute(key: Swift.String, value: Any, callback: @escaping ChabokKit.Callback)
  @objc final public func setLocation(latitude: Swift.Double, longitude: Swift.Double)
  @objc final public func setLocation(latitude: Swift.Double, longitude: Swift.Double, callback: @escaping ChabokKit.Callback)
  @objc final public func setPushId(id: Swift.String)
  @objc final public func setPushId(id: Swift.String, callback: @escaping ChabokKit.Callback)
  @objc deinit
}
public class FoundationHTTPHandler : ChabokKit.HTTPHandler {
  public init()
  public func convert(request: Foundation.URLRequest) -> Foundation.Data
  public func parse(data: Foundation.Data) -> Swift.Int
  public func register(delegate: ChabokKit.HTTPHandlerDelegate)
  @objc deinit
}
public enum EventType : Swift.String {
  case STATIC
  case DYNAMIC
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum SecurityErrorCode : Swift.UInt16 {
  case acceptFailed
  case pinningFailed
  public typealias RawValue = Swift.UInt16
  public init?(rawValue: Swift.UInt16)
  public var rawValue: Swift.UInt16 {
    get
  }
}
public enum PinningState {
  case success
  case failed(CoreFoundation.CFError?)
}
public protocol CertificatePinning : AnyObject {
  func evaluateTrust(trust: Security.SecTrust, domain: Swift.String?, completion: ((ChabokKit.PinningState) -> ()))
}
public protocol HeaderValidator : AnyObject {
  func validate(headers: [Swift.String : Swift.String], key: Swift.String) -> Swift.Error?
}
@_inheritsConvenienceInitializers @objc final public class AnalyticsAction : ObjectiveC.NSObject {
  @objc final public func sendEvent(id: Swift.String, body: Swift.Dictionary<Swift.String, Any>? = nil)
  @objc final public func sendEvent(id: Swift.String, body: Swift.Dictionary<Swift.String, Any>? = nil, callback: @escaping ChabokKit.Callback)
  @objc deinit
  @objc override dynamic public init()
}
public enum ConnectionEvent {
  case connected([Swift.String : Swift.String])
  case disconnected(Swift.String, Swift.UInt16)
  case text(Swift.String)
  case binary(Foundation.Data)
  case pong(Foundation.Data?)
  case ping(Foundation.Data?)
  case error(Swift.Error)
}
public protocol Connection {
  func write(data: Foundation.Data, opcode: ChabokKit.FrameOpCode)
}
public protocol ConnectionDelegate : AnyObject {
  func didReceive(event: ChabokKit.ServerEvent)
}
public enum ServerEvent {
  case connected(ChabokKit.Connection, [Swift.String : Swift.String])
  case disconnected(ChabokKit.Connection, Swift.String, Swift.UInt16)
  case text(ChabokKit.Connection, Swift.String)
  case binary(ChabokKit.Connection, Foundation.Data)
  case pong(ChabokKit.Connection, Foundation.Data?)
  case ping(ChabokKit.Connection, Foundation.Data?)
}
public protocol Server {
  func start(address: Swift.String, port: Swift.UInt16) -> Swift.Error?
}
public enum WebSocketStatus {
  case OPENED
  case CLOSED
  case HAS_MESSAGE
  case ON_ERROR
  public static func == (a: ChabokKit.WebSocketStatus, b: ChabokKit.WebSocketStatus) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum CloseCode : Swift.UInt16 {
  case normal
  case goingAway
  case protocolError
  case protocolUnhandledType
  case noStatusReceived
  case encoding
  case policyViolated
  case messageTooBig
  public typealias RawValue = Swift.UInt16
  public var rawValue: Swift.UInt16 {
    get
  }
  public init?(rawValue: Swift.UInt16)
}
public enum FrameOpCode : Swift.UInt8 {
  case continueFrame
  case textFrame
  case binaryFrame
  case connectionClose
  case ping
  case pong
  case unknown
  public typealias RawValue = Swift.UInt8
  public init?(rawValue: Swift.UInt8)
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct Frame {
}
public enum FrameEvent {
  case frame(ChabokKit.Frame)
  case error(Swift.Error)
}
public protocol FramerEventClient : AnyObject {
  func frameProcessed(event: ChabokKit.FrameEvent)
}
public protocol Framer {
  func add(data: Foundation.Data)
  func register(delegate: ChabokKit.FramerEventClient)
  func createWriteFrame(opcode: ChabokKit.FrameOpCode, payload: Foundation.Data, isCompressed: Swift.Bool) -> Foundation.Data
  func updateCompression(supports: Swift.Bool)
  func supportsCompression() -> Swift.Bool
}
public class WSFramer : ChabokKit.Framer {
  public var compressionEnabled: Swift.Bool
  public init(isServer: Swift.Bool = false)
  public func updateCompression(supports: Swift.Bool)
  public func supportsCompression() -> Swift.Bool
  public func add(data: Foundation.Data)
  public func register(delegate: ChabokKit.FramerEventClient)
  public func createWriteFrame(opcode: ChabokKit.FrameOpCode, payload: Foundation.Data, isCompressed: Swift.Bool) -> Foundation.Data
  @objc deinit
}
public protocol MyWSArrayType {
}
extension UInt8 : ChabokKit.MyWSArrayType {
}
extension Array where Element : ChabokKit.MyWSArrayType, Element : Swift.UnsignedInteger {
  public func readUint16(offset: Swift.Int) -> Swift.UInt16
  public func readUint64(offset: Swift.Int) -> Swift.UInt64
  public func unmaskData(maskStart: Swift.Int, offset: Swift.Int, length: Swift.Int) -> Foundation.Data
}
public func writeUint16(_ buffer: inout [Swift.UInt8], offset: Swift.Int, value: Swift.UInt16)
public func writeUint32(_ buffer: inout [Swift.UInt8], offset: Swift.Int, value: Swift.UInt32)
public func writeUint64(_ buffer: inout [Swift.UInt8], offset: Swift.Int, value: Swift.UInt64)
@objc @_inheritsConvenienceInitializers @available(OSX 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
public class NativeEngine : ObjectiveC.NSObject, ChabokKit.Engine, Foundation.URLSessionDataDelegate, Foundation.URLSessionWebSocketDelegate {
  public func register(delegate: ChabokKit.EngineDelegate)
  public func start(request: Foundation.URLRequest)
  public func stop(closeCode: Swift.UInt16)
  public func forceStop()
  public func write(string: Swift.String, completion: (() -> ())?)
  public func write(data: Foundation.Data, opcode: ChabokKit.FrameOpCode, completion: (() -> ())?)
  @objc public func urlSession(_ session: Foundation.URLSession, webSocketTask: Foundation.URLSessionWebSocketTask, didOpenWithProtocol protocol: Swift.String?)
  @objc public func urlSession(_ session: Foundation.URLSession, webSocketTask: Foundation.URLSessionWebSocketTask, didCloseWith closeCode: Foundation.URLSessionWebSocketTask.CloseCode, reason: Foundation.Data?)
  @objc deinit
  @objc override dynamic public init()
}
public typealias NetworkCallback = (Swift.Bool, Any) -> Swift.Void
public enum HTTPUpgradeError : Swift.Error {
  case notAnUpgrade(Swift.Int)
  case invalidData
}
public struct HTTPWSHeader {
  public static func createUpgrade(request: Foundation.URLRequest, supportsCompression: Swift.Bool, secKeyValue: Swift.String) -> Foundation.URLRequest
  public static func generateWebSocketKey() -> Swift.String
}
public enum HTTPEvent {
  case success([Swift.String : Swift.String])
  case failure(Swift.Error)
}
public protocol HTTPHandlerDelegate : AnyObject {
  func didReceiveHTTP(event: ChabokKit.HTTPEvent)
}
public protocol HTTPHandler {
  func register(delegate: ChabokKit.HTTPHandlerDelegate)
  func convert(request: Foundation.URLRequest) -> Foundation.Data
  func parse(data: Foundation.Data) -> Swift.Int
}
public protocol HTTPServerDelegate : AnyObject {
  func didReceive(event: ChabokKit.HTTPEvent)
}
public protocol HTTPServerHandler {
  func register(delegate: ChabokKit.HTTPServerDelegate)
  func parse(data: Foundation.Data)
  func createResponse(headers: [Swift.String : Swift.String]) -> Foundation.Data
}
public struct URLParts {
}
extension URL {
  public var isTLSScheme: Swift.Bool {
    get
  }
  public func getParts() -> ChabokKit.URLParts?
}
extension Data {
}
public enum TCPTransportError : Swift.Error {
  case invalidRequest
  public static func == (a: ChabokKit.TCPTransportError, b: ChabokKit.TCPTransportError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@available(OSX 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
public class TCPTransport : ChabokKit.Transport {
  public var usingTLS: Swift.Bool {
    get
  }
  public init(connection: Network.NWConnection)
  public init()
  public func connect(url: Foundation.URL, timeout: Swift.Double = 10, certificatePinning: ChabokKit.CertificatePinning? = nil)
  public func disconnect()
  public func register(delegate: ChabokKit.TransportEventClient)
  public func write(data: Foundation.Data, completion: @escaping ((Swift.Error?) -> ()))
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Logger {
  @objc deinit
}
@available(OSX 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
@available(watchOS, unavailable)
public class WebSocketServer : ChabokKit.Server, ChabokKit.ConnectionDelegate {
  public var onEvent: ((ChabokKit.ServerEvent) -> Swift.Void)?
  public init()
  public func start(address: Swift.String, port: Swift.UInt16) -> Swift.Error?
  public func didReceive(event: ChabokKit.ServerEvent)
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(OSX 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
public class ServerConnection : ChabokKit.Connection, ChabokKit.HTTPServerDelegate, ChabokKit.FramerEventClient, ChabokKit.FrameCollectorDelegate, ChabokKit.TransportEventClient {
  public var onEvent: ((ChabokKit.ConnectionEvent) -> Swift.Void)?
  weak public var delegate: ChabokKit.ConnectionDelegate?
  public func write(data: Foundation.Data, opcode: ChabokKit.FrameOpCode)
  public func connectionChanged(state: ChabokKit.ConnectionState)
  public func didReceive(event: ChabokKit.HTTPEvent)
  public func frameProcessed(event: ChabokKit.FrameEvent)
  public func didForm(event: ChabokKit.FrameCollector.Event)
  public func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
  @objc deinit
}
public enum ConnectionState {
  case connected
  case waiting
  case cancelled
  case failed(Swift.Error?)
  case viability(Swift.Bool)
  case shouldReconnect(Swift.Bool)
  case receive(Foundation.Data)
}
public protocol TransportEventClient : AnyObject {
  func connectionChanged(state: ChabokKit.ConnectionState)
}
public protocol Transport : AnyObject {
  func register(delegate: ChabokKit.TransportEventClient)
  func connect(url: Foundation.URL, timeout: Swift.Double, certificatePinning: ChabokKit.CertificatePinning?)
  func disconnect()
  func write(data: Foundation.Data, completion: @escaping ((Swift.Error?) -> ()))
  var usingTLS: Swift.Bool { get }
}
@objc public enum LogLevel : Swift.Int {
  case Verbose = 1
  case Debug = 2
  case Info = 3
  case Warn = 4
  case Error = 5
  case Assert = 6
  case Suppress = 7
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
  public init?(rawValue: Swift.Int)
}
@_hasMissingDesignatedInitializers public class FoundationHTTPServerHandler : ChabokKit.HTTPServerHandler {
  public func register(delegate: ChabokKit.HTTPServerDelegate)
  public func createResponse(headers: [Swift.String : Swift.String]) -> Foundation.Data
  public func parse(data: Foundation.Data)
  @objc deinit
}
public protocol CompressionHandler {
  func load(headers: [Swift.String : Swift.String])
  func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
  func compress(data: Foundation.Data) -> Foundation.Data?
}
@_hasMissingDesignatedInitializers public class FirstOpenRepo {
  public static var callback: ChabokKit.Callback?
  public static func firstOpen(callback: ChabokKit.Callback?, _ networkCallback: ChabokKit.NetworkCallback?)
  public static func parseResponse(success: Swift.Bool, responseValue: Any)
  @objc deinit
}
@objc public enum Gender : Swift.Int {
  case FEMALE = 0
  case MALE = 1
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class ChabokAction : ObjectiveC.NSObject {
  @objc deinit
}
public protocol EngineDelegate : AnyObject {
  func didReceive(event: ChabokKit.WebSocketEvent)
}
public protocol Engine {
  func register(delegate: ChabokKit.EngineDelegate)
  func start(request: Foundation.URLRequest)
  func stop(closeCode: Swift.UInt16)
  func forceStop()
  func write(data: Foundation.Data, opcode: ChabokKit.FrameOpCode, completion: (() -> ())?)
  func write(string: Swift.String, completion: (() -> ())?)
}
public class WSCompression : ChabokKit.CompressionHandler {
  public init()
  public func load(headers: [Swift.String : Swift.String])
  public func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
  public func compress(data: Foundation.Data) -> Foundation.Data?
  @objc deinit
}
public class StringHTTPHandler : ChabokKit.HTTPHandler {
  public init()
  public func convert(request: Foundation.URLRequest) -> Foundation.Data
  public func parse(data: Foundation.Data) -> Swift.Int
  public func register(delegate: ChabokKit.HTTPHandlerDelegate)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PingRepo {
  public static var isPinging: Swift.Bool
  public static func loopingPing()
  public static func ping()
  public static func parseResponse(success: Swift.Bool, responseValue: Any)
  public static func onSuccessResponse(responseValue: Any)
  public static func onErrorResponse(responseValue: Any)
  @objc deinit
}
public enum FoundationSecurityError : Swift.Error {
  case invalidRequest
  public static func == (a: ChabokKit.FoundationSecurityError, b: ChabokKit.FoundationSecurityError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public class FoundationSecurity {
  public init(allowSelfSigned: Swift.Bool = false)
  @objc deinit
}
extension FoundationSecurity : ChabokKit.CertificatePinning {
  public func evaluateTrust(trust: Security.SecTrust, domain: Swift.String?, completion: ((ChabokKit.PinningState) -> ()))
}
extension FoundationSecurity : ChabokKit.HeaderValidator {
  public func validate(headers: [Swift.String : Swift.String], key: Swift.String) -> Swift.Error?
}
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public class Reachability {
  public typealias NetworkReachable = (ChabokKit.Reachability) -> ()
  public typealias NetworkUnreachable = (ChabokKit.Reachability) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: ChabokKit.Reachability.NetworkStatus, b: ChabokKit.Reachability.NetworkStatus) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public enum Connection : Swift.CustomStringConvertible {
    case unavailable, wifi, cellular
    public var description: Swift.String {
      get
    }
    @available(*, deprecated, renamed: "unavailable")
    public static let none: ChabokKit.Reachability.Connection
    public static func == (a: ChabokKit.Reachability.Connection, b: ChabokKit.Reachability.Connection) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public var whenReachable: ChabokKit.Reachability.NetworkReachable?
  public var whenUnreachable: ChabokKit.Reachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: ChabokKit.Reachability.Connection {
    get
  }
  public var connection: ChabokKit.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  convenience public init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  convenience public init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
extension Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class InitializeUtils {
  @objc deinit
}
final public class Strongbox {
  final public var lastStatus: Darwin.OSStatus {
    get
  }
  public init(keyPrefix: Swift.String?)
  convenience public init()
  @discardableResult
  final public func archive(_ object: Any?, key: Swift.String, accessibility: CoreFoundation.CFString = kSecAttrAccessibleWhenUnlocked) -> Swift.Bool
  @discardableResult
  final public func archive<T>(object: T?, key: Swift.String, encoder: Foundation.JSONEncoder = .init(), accessibility: CoreFoundation.CFString = kSecAttrAccessibleWhenUnlocked) throws -> Swift.Bool where T : Swift.Encodable
  @discardableResult
  final public func remove(key: Swift.String, accessibility: CoreFoundation.CFString = kSecAttrAccessibleWhenUnlocked) -> Swift.Bool
  final public func unarchive(objectForKey key: Swift.String) -> Any?
  final public func unarchive<T>(_ type: T.Type = T.self, for key: Swift.String, decoder: Foundation.JSONDecoder = .init()) throws -> T? where T : Swift.Decodable
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class Profile : ObjectiveC.NSObject {
  @objc @_inheritsConvenienceInitializers public class Builder : ObjectiveC.NSObject {
    @discardableResult
    public func email(_ email: Swift.String) -> ChabokKit.Profile.Builder
    @discardableResult
    public func mobile(_ mobile: Swift.String) -> ChabokKit.Profile.Builder
    @discardableResult
    public func name(_ name: Swift.String) -> ChabokKit.Profile.Builder
    @discardableResult
    public func family(_ family: Swift.String) -> ChabokKit.Profile.Builder
    @discardableResult
    public func birthDate(_ birthDate: Swift.String) -> ChabokKit.Profile.Builder
    @discardableResult
    public func timeZone(_ timeZone: Swift.String) -> ChabokKit.Profile.Builder
    @discardableResult
    public func gender(_ gender: ChabokKit.Gender) -> ChabokKit.Profile.Builder
    public func build() -> ChabokKit.Profile
    @objc deinit
    @objc override dynamic public init()
  }
  @_inheritsConvenienceInitializers @objc public class ProfileBuilder : ObjectiveC.NSObject {
    @discardableResult
    @objc public func email(_ email: Swift.String) -> ChabokKit.Profile.ProfileBuilder
    @discardableResult
    @objc public func mobile(_ mobile: Swift.String) -> ChabokKit.Profile.ProfileBuilder
    @discardableResult
    @objc public func name(_ name: Swift.String) -> ChabokKit.Profile.ProfileBuilder
    @discardableResult
    @objc public func family(_ family: Swift.String) -> ChabokKit.Profile.ProfileBuilder
    @discardableResult
    @objc public func birthDate(_ birthDate: Swift.String) -> ChabokKit.Profile.ProfileBuilder
    @discardableResult
    @objc public func timeZone(_ timeZone: Swift.String) -> ChabokKit.Profile.ProfileBuilder
    @discardableResult
    @objc public func gender(_ gender: ChabokKit.Gender) -> ChabokKit.Profile.ProfileBuilder
    @objc public func build() -> ChabokKit.Profile
    @objc deinit
    @objc override dynamic public init()
  }
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class Chabok : ObjectiveC.NSObject {
  @objc public static func setLogLevel(logLevel: ChabokKit.LogLevel)
  @objc public static func lockLogging(lock: Swift.Bool)
  @objc public static func perform() -> ChabokKit.ChabokAction
  @objc public static func user() -> ChabokKit.UserAction
  @objc public static func analytics() -> ChabokKit.AnalyticsAction
  @objc public static func initialize(clientId: Swift.String, clientSecret: Swift.String, callback: @escaping ChabokKit.Callback)
  @objc public static func setDefaultTracker(id: Swift.String)
  @objc public static func kdsEpyt(t: Swift.String)
  @objc public static func disableSdk(disableSdk: Swift.Bool)
  @objc public static func isSdkDisabled() -> Swift.Bool
  @objc deinit
}
public class WSEngine : ChabokKit.Engine, ChabokKit.TransportEventClient, ChabokKit.FramerEventClient, ChabokKit.FrameCollectorDelegate, ChabokKit.HTTPHandlerDelegate {
  public var respondToPingWithPong: Swift.Bool
  public init(transport: ChabokKit.Transport, certPinner: ChabokKit.CertificatePinning? = nil, headerValidator: ChabokKit.HeaderValidator = FoundationSecurity(), httpHandler: ChabokKit.HTTPHandler = FoundationHTTPHandler(), framer: ChabokKit.Framer = WSFramer(), compressionHandler: ChabokKit.CompressionHandler? = nil)
  public func register(delegate: ChabokKit.EngineDelegate)
  public func start(request: Foundation.URLRequest)
  public func stop(closeCode: Swift.UInt16 = CloseCode.normal.rawValue)
  public func forceStop()
  public func write(string: Swift.String, completion: (() -> ())?)
  public func write(data: Foundation.Data, opcode: ChabokKit.FrameOpCode, completion: (() -> ())?)
  public func connectionChanged(state: ChabokKit.ConnectionState)
  public func didReceiveHTTP(event: ChabokKit.HTTPEvent)
  public func frameProcessed(event: ChabokKit.FrameEvent)
  public func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
  public func didForm(event: ChabokKit.FrameCollector.Event)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class InitRepo {
  public static var callback: ChabokKit.Callback?
  public static func _init(callback: ChabokKit.Callback?, _ networkCallback: ChabokKit.NetworkCallback?)
  public static func parseResponse(success: Swift.Bool, responseValue: Any)
  @objc deinit
}
public enum FoundationTransportError : Swift.Error {
  case invalidRequest
  case invalidOutputStream
  case timeout
  public static func == (a: ChabokKit.FoundationTransportError, b: ChabokKit.FoundationTransportError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc public class FoundationTransport : ObjectiveC.NSObject, ChabokKit.Transport, Foundation.StreamDelegate {
  public var usingTLS: Swift.Bool {
    get
  }
  public init(streamConfiguration: ((Foundation.InputStream, Foundation.OutputStream) -> Swift.Void)? = nil)
  @objc deinit
  public func connect(url: Foundation.URL, timeout: Swift.Double = 10, certificatePinning: ChabokKit.CertificatePinning? = nil)
  public func disconnect()
  public func register(delegate: ChabokKit.TransportEventClient)
  public func write(data: Foundation.Data, completion: @escaping ((Swift.Error?) -> ()))
  @objc open func stream(_ aStream: Foundation.Stream, handle eventCode: Foundation.Stream.Event)
  @objc override dynamic public init()
}
public typealias DBCallback = (Swift.Bool, Swift.String, Swift.String) -> Swift.Void
@objc public enum LoginKey : Swift.Int, Swift.RawRepresentable {
  case EMAIL
  case MOBILE
  public typealias RawValue = Swift.String
  public var rawValue: ChabokKit.LoginKey.RawValue {
    get
  }
  public init?(rawValue: ChabokKit.LoginKey.RawValue)
}
public typealias Callback = (Swift.Bool, Swift.String) -> Swift.Void
public enum ErrorType : Swift.Error {
  case compressionError
  case securityError
  case protocolError
  case serverError
  public static func == (a: ChabokKit.ErrorType, b: ChabokKit.ErrorType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct WSError : Swift.Error {
  public let type: ChabokKit.ErrorType
  public let message: Swift.String
  public let code: Swift.UInt16
  public init(type: ChabokKit.ErrorType, message: Swift.String, code: Swift.UInt16)
}
public protocol WebSocketClient : AnyObject {
  func connect()
  func disconnect(closeCode: Swift.UInt16)
  func write(string: Swift.String, completion: (() -> ())?)
  func write(stringData: Foundation.Data, completion: (() -> ())?)
  func write(data: Foundation.Data, completion: (() -> ())?)
  func write(ping: Foundation.Data, completion: (() -> ())?)
  func write(pong: Foundation.Data, completion: (() -> ())?)
}
extension WebSocketClient {
  public func write(string: Swift.String)
  public func write(data: Foundation.Data)
  public func write(ping: Foundation.Data)
  public func write(pong: Foundation.Data)
  public func disconnect()
}
public enum WebSocketEvent {
  case connected([Swift.String : Swift.String])
  case disconnected(Swift.String, Swift.UInt16)
  case text(Swift.String)
  case binary(Foundation.Data)
  case pong(Foundation.Data?)
  case ping(Foundation.Data?)
  case error(Swift.Error?)
  case viabilityChanged(Swift.Bool)
  case reconnectSuggested(Swift.Bool)
  case cancelled
}
public protocol WebSocketDelegate : AnyObject {
  func didReceive(event: ChabokKit.WebSocketEvent, client: ChabokKit.WebSocket)
}
open class WebSocket : ChabokKit.WebSocketClient, ChabokKit.EngineDelegate {
  weak public var delegate: ChabokKit.WebSocketDelegate?
  public var onEvent: ((ChabokKit.WebSocketEvent) -> Swift.Void)?
  public var request: Foundation.URLRequest
  public var callbackQueue: Dispatch.DispatchQueue
  public var respondToPingWithPong: Swift.Bool {
    get
    set
  }
  public init(request: Foundation.URLRequest, engine: ChabokKit.Engine)
  convenience public init(request: Foundation.URLRequest, certPinner: ChabokKit.CertificatePinning? = FoundationSecurity(), compressionHandler: ChabokKit.CompressionHandler? = nil, useCustomEngine: Swift.Bool = true)
  public func connect()
  public func disconnect(closeCode: Swift.UInt16 = CloseCode.normal.rawValue)
  public func forceDisconnect()
  public func write(data: Foundation.Data, completion: (() -> ())?)
  public func write(string: Swift.String, completion: (() -> ())?)
  public func write(stringData: Foundation.Data, completion: (() -> ())?)
  public func write(ping: Foundation.Data, completion: (() -> ())?)
  public func write(pong: Foundation.Data, completion: (() -> ())?)
  public func didReceive(event: ChabokKit.WebSocketEvent)
  @objc deinit
}
extension ChabokKit.EventType : Swift.Equatable {}
extension ChabokKit.EventType : Swift.Hashable {}
extension ChabokKit.EventType : Swift.RawRepresentable {}
extension ChabokKit.SecurityErrorCode : Swift.Equatable {}
extension ChabokKit.SecurityErrorCode : Swift.Hashable {}
extension ChabokKit.SecurityErrorCode : Swift.RawRepresentable {}
extension ChabokKit.WebSocketStatus : Swift.Equatable {}
extension ChabokKit.WebSocketStatus : Swift.Hashable {}
extension ChabokKit.CloseCode : Swift.Equatable {}
extension ChabokKit.CloseCode : Swift.Hashable {}
extension ChabokKit.CloseCode : Swift.RawRepresentable {}
extension ChabokKit.FrameOpCode : Swift.Equatable {}
extension ChabokKit.FrameOpCode : Swift.Hashable {}
extension ChabokKit.FrameOpCode : Swift.RawRepresentable {}
extension ChabokKit.TCPTransportError : Swift.Equatable {}
extension ChabokKit.TCPTransportError : Swift.Hashable {}
extension ChabokKit.LogLevel : Swift.Equatable {}
extension ChabokKit.LogLevel : Swift.Hashable {}
extension ChabokKit.LogLevel : Swift.RawRepresentable {}
extension ChabokKit.Gender : Swift.Equatable {}
extension ChabokKit.Gender : Swift.Hashable {}
extension ChabokKit.Gender : Swift.RawRepresentable {}
extension ChabokKit.FoundationSecurityError : Swift.Equatable {}
extension ChabokKit.FoundationSecurityError : Swift.Hashable {}
@available(*, unavailable, renamed: "Connection")
extension ChabokKit.Reachability.NetworkStatus : Swift.Equatable {}
@available(*, unavailable, renamed: "Connection")
extension ChabokKit.Reachability.NetworkStatus : Swift.Hashable {}
extension ChabokKit.Reachability.Connection : Swift.Equatable {}
extension ChabokKit.Reachability.Connection : Swift.Hashable {}
extension ChabokKit.FoundationTransportError : Swift.Equatable {}
extension ChabokKit.FoundationTransportError : Swift.Hashable {}
extension ChabokKit.LoginKey : Swift.Equatable {}
extension ChabokKit.LoginKey : Swift.Hashable {}
extension ChabokKit.ErrorType : Swift.Equatable {}
extension ChabokKit.ErrorType : Swift.Hashable {}
